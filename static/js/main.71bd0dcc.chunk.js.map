{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/Pagination/Pagination.js","components/Details/Details.js","redux/store.js","components/Header/Header.js","api/api.js","App.js","index.js"],"names":["MovieCard","Title","Year","Type","imdbID","Poster","showDetails","className","src","alt","type","onClick","MoviesList","movies","map","movie","key","Pagination","pages","changePage","currentPage","pageBtns","Array","from","length","_","i","slice","btn","ClassNames","active","page","Details","props","Plot","href","Director","Actors","Genre","Country","Production","Released","Runtime","imdbRating","Rated","getMovies","state","getDetailedMovie","detailedMovie","getHistory","searchHistory","getCurQuery","currentQuery","getTotalResults","totalResults","getCurrentPage","setMovies","setDetailedMovie","setHistory","setCurrentQuery","setTotalResults","setCurrentPage","initialState","localStorage","getItem","JSON","parse","store","createStore","action","subscribe","setItem","stringify","getState","Header","findMovies","dispatch","notFound","setNotFound","useState","inputValue","setInputValue","onSubmit","event","preventDefault","value","trimLeft","placeholder","onChange","target","clear","window","location","reload","query","filter","entry","API_URL","fetchMovies","title","a","fetch","json","fetchMovieById","id","App","useDispatch","useSelector","curQuery","Response","Search","includes","totalPages","Math","floor","ReactDOM","render","document","getElementById"],"mappings":"kWAIaA,G,kBAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MACAC,EAFuB,EAEvBA,KACAC,EAHuB,EAGvBA,KACAC,EAJuB,EAIvBA,OACAC,EALuB,EAKvBA,OACAC,EANuB,EAMvBA,YANuB,OAQvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,cAAcN,GAC3B,2CAAaE,IACb,mDAAqBD,IACrB,4BACEQ,KAAK,SACLC,QAAS,kBAAML,EAAYF,IAC3BG,UAAU,yBAHZ,sBCrBGK,EAAa,SAAC,GAAD,QACxBC,cADwB,MACf,GADe,EAExBP,EAFwB,EAExBA,YAFwB,OAIxB,yBAAKC,UAAU,UACZM,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eACEC,IAAKD,EAAMX,OACXE,YAAaA,GACTS,S,iBCVCE,G,MAAa,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAC1CC,EAAWC,MAAMC,KAAK,CAAEC,OAAQN,IAAS,SAACO,EAAGC,GAAJ,OAAUA,EAAI,KAE3D,OACE,wBAAInB,UAAU,cACK,IAAhBa,GACC,4BACE,4BACEV,KAAK,SACLH,UAAU,iBACVI,QAAS,WACPQ,EAAW,KAJf,OAYFE,EACGM,MAAMP,GAAe,EAAIA,EAAc,EAAI,EAAGA,EAAc,GAC5DN,KAAI,SAAAc,GAAG,OACN,wBAAIZ,IAAKY,GACP,4BACElB,KAAK,SACLH,UAAWsB,IAAW,CACpB,YAAY,EACZC,OAAQF,IAAQR,IAElBT,QAAS,kBAAMQ,EAAWS,KAEzBA,OAKVR,EAAcF,GACb,4BACE,4BACER,KAAK,SACLH,UAAU,iBACVI,QAAS,WACPQ,EAAWD,GACPA,EAAQ,IAAME,IAAgBF,GAASE,EAAc,KACvDC,EAAWA,EAASP,KAAI,SAAAiB,GAAI,OAAIA,EAAO,QAN7C,UCxCGC,EAAU,SAAAC,GAAK,OAC1B,yBAAK1B,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKyB,EAAM5B,OACXI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,cAAc0B,EAAMhC,SAGrC,6BACA,yBAAKM,UAAU,WACZ0B,EAAMC,KACP,6BACA,uBAAGC,KAAI,qCAAgCF,EAAM7B,OAAtC,MAAP,aACA,6BACA,2BAAG,qCACH,2BAAI6B,EAAM9B,MACV,2BAAG,yCACH,2BAAI8B,EAAMG,UACV,2BAAG,uCACH,2BAAIH,EAAMI,QACV,2BAAG,sCACH,2BAAIJ,EAAMK,OACV,2BAAG,wCACH,2BAAIL,EAAMM,SACV,2BAAG,2CACH,2BAAIN,EAAMO,YACV,2BAAG,yCACH,2BAAIP,EAAMQ,UACV,2BAAG,yCACH,2BAAIR,EAAMS,SACV,2BAAG,4CACH,2BAAIT,EAAMU,YACV,2BAAG,0CACH,2BAAIV,EAAMW,W,sBChCLC,EAAY,SAAAC,GAAK,OAAIA,EAAMjC,QAC3BkC,EAAmB,SAAAD,GAAK,OAAIA,EAAME,eAClCC,EAAa,SAAAH,GAAK,OAAIA,EAAMI,eAC5BC,EAAc,SAAAL,GAAK,OAAIA,EAAMM,cAC7BC,EAAkB,SAAAP,GAAK,OAAIA,EAAMQ,cACjCC,EAAiB,SAAAT,GAAK,OAAIA,EAAM1B,aAGhCoC,EAAY,SAAA3C,GAAM,MAAK,CAClCH,KAlBwB,YAmBxBG,WAGW4C,EAAmB,SAAAT,GAAa,MAAK,CAChDtC,KAtBgC,mBAuBhCsC,kBAGWU,EAAa,SAAAR,GAAa,MAAK,CAC1CxC,KA1ByB,aA2BzBwC,kBAGWS,EAAkB,SAAAP,GAAY,MAAK,CAC9C1C,KA9B+B,kBA+B/B0C,iBAGWQ,EAAkB,SAAAN,GAAY,MAAK,CAC9C5C,KAlC+B,kBAmC/B4C,iBAGWO,EAAiB,SAAAzC,GAAW,MAAK,CAC5CV,KAtC8B,iBAuC9BU,gBAyCI0C,EAAeC,aAAaC,QAAQ,cACtCC,KAAKC,MAAMH,aAAaC,QAAQ,eAChC,CACAnD,OAAQ,GACRmC,cAAe,KACfE,cAAe,GACfE,aAAc,GACdE,aAAc,EACdlC,YAAa,GAGX+C,EAAQC,aAhDE,WAAmC,IAAlCtB,EAAiC,uDAAzBgB,EAAcO,EAAW,uCAChD,OAAQA,EAAO3D,MACb,IAlDsB,YAmDpB,OAAO,2BACFoC,GADL,IAEEjC,OAAQwD,EAAOxD,SAEnB,IAtD8B,mBAuD5B,OAAO,2BACFiC,GADL,IAEEE,cAAeqB,EAAOrB,gBAE1B,IA1DuB,aA2DrB,OAAO,2BACFF,GADL,IAEEI,cAAemB,EAAOnB,gBAE1B,IA9D6B,kBA+D3B,OAAO,2BACFJ,GADL,IAEEM,aAAciB,EAAOjB,eAEzB,IAlE6B,kBAmE3B,OAAO,2BACFN,GADL,IAEEQ,aAAce,EAAOf,eAEzB,IAtE4B,iBAuE1B,OAAO,2BACFR,GADL,IAEE1B,YAAaiD,EAAOjD,cAExB,QACE,OAAO0B,MAiBbqB,EAAMG,WAAU,WACdP,aAAaQ,QAAQ,aAAcN,KAAKO,UAAUL,EAAMM,gBAG3CN,QClGFO,EAAS,SAAC,GAMhB,IALLC,EAKI,EALJA,WACAC,EAII,EAJJA,SACA1B,EAGI,EAHJA,cACA2B,EAEI,EAFJA,SACAC,EACI,EADJA,YACI,EACgCC,mBAAS,IADzC,mBACGC,EADH,KACeC,EADf,KAGJ,OACE,yBAAK1E,UAAU,UACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,UACb,0BACEA,UAAU,cACV2E,SAAU,SAACC,GACTA,EAAMC,iBACNT,EAAWK,EAAY,GACvBJ,EAASjB,EAAgBqB,IACzBC,EAAc,IACdL,EAASf,EAAe,MAG1B,2BACEnD,KAAK,OACLH,UAAWsB,IAAW,CACpB,gBAAgB,EAChB,YAAagD,IAEfQ,MAAOL,EAAWM,WAClBC,YAAY,uBACZC,SAAU,SAACL,GACTF,EAAcE,EAAMM,OAAOJ,OAC3BP,GAAY,MAGfD,GACC,uBAAGtE,UAAU,kBAAb,wCAIF,4BACEG,KAAK,SACLH,UAAU,UAFZ,UAMA,4BACEG,KAAK,SACLH,UAAU,uBACVI,QAAS,WACPoD,aAAa2B,QACbC,OAAOC,SAASC,WALpB,WAYJ,6BACE,wBAAItF,UAAU,cAAd,wBAGJ,yBAAKA,UAAU,kBACa,IAAzB2C,EAAc1B,QACb,uBAAGjB,UAAU,2BAAb,qBAEF,wBAAIA,UAAU,wBACX2C,EAAcpC,KAAI,SAAAgF,GAAK,OACtB,wBAAI9E,IAAK8E,GACP,4BACEpF,KAAK,SACLH,UAAU,yBACVI,QAAS,kBAAMiE,EAASlB,EAAW,YAAIR,EACpC6C,QAAO,SAAAC,GAAK,OAAIA,IAAUF,UAJ/B,KAQA,4BACEpF,KAAK,SACLH,UAAU,uBACVI,QAAS,WACPiE,EAASf,EAAe,IACxBe,EAASjB,EAAgBmC,IACzBnB,EAAWmB,EAAO,KAGnBA,WC9FXG,EAAO,2BAEAC,EAAW,uCAAG,WAAMC,EAAOpE,GAAb,eAAAqE,EAAA,sEACLC,MAAM,GAAD,OACpBJ,EADoB,cACPE,EADO,iCACuBpE,IAFvB,cACnBhB,EADmB,yBAKlBA,EAAMuF,QALY,2CAAH,wDAQXC,EAAc,uCAAG,WAAMC,GAAN,eAAAJ,EAAA,sEACRC,MAAM,GAAD,OAAIJ,EAAJ,8BAAiCO,IAD9B,cACtBzF,EADsB,yBAGrBA,EAAMuF,QAHe,2CAAH,sDCYdG,EAAM,WAAO,IAAD,EACS1B,oBAAS,GADlB,mBAChBF,EADgB,KACNC,EADM,KAGjBF,EAAW8B,cAEX7F,EAAS8F,YAAY9D,GACrBG,EAAgB2D,YAAY5D,GAC5BG,EAAgByD,YAAY1D,GAC5B2D,EAAWD,YAAYxD,GACvBG,EAAeqD,YAAYtD,GAC3BjC,EAAcuF,YAAYpD,GAc1BoB,EAAU,uCAAG,WAAMwB,EAAOpE,GAAb,eAAAqE,EAAA,sEACGF,EAAYC,EAAOpE,GADtB,OAGM,WAFjBhB,EADW,QAGP8F,UACRjC,EAASpB,EAAUzC,EAAM+F,SACzBlC,EAAShB,GAAiB7C,EAAMuC,eAjBbwC,EAkBLK,EAjBZjD,EAAc6D,SAASjB,KAIvB5C,EAAc1B,OAAS,GACzBoD,EAASlB,EAAW,GAAD,mBAAKR,GAAL,CAAoB4C,MAEvClB,EAASlB,EAAW,GAAD,mBAAKR,EAAcvB,MAAM,IAAzB,CAA6BmE,QAYhDhB,GAAY,GARG,iCAZG,IAACgB,IAYJ,OAAH,wDAYVxF,EAAW,uCAAG,WAAMkG,GAAN,eAAAJ,EAAA,sEACEG,EAAeC,GADjB,OACZzF,EADY,OAGlB6D,EAASnB,EAAiB1C,IAHR,2CAAH,sDAMXI,EAAU,uCAAG,WAAMY,GAAN,eAAAqE,EAAA,sEACGF,EAAYU,EAAU7E,GADzB,OACXhB,EADW,OAGjB6D,EAASpB,EAAUzC,EAAM+F,SACzBlC,EAASf,EAAe9B,IAJP,2CAAH,sDAOViF,EAAaC,KAAKC,MAAM5D,EAAe,IAE7C,OACE,yBAAK/C,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEoE,WAAYA,EACZC,SAAUA,EACV1B,cAAeA,EACf2B,SAAUA,EACVC,YAAaA,IAGf,kBAAC,EAAD,CACEjE,OAAQA,EACRP,YAAaA,IAGdgD,EAAe,IACd,kBAAC,EAAD,CACEpC,MAAO8F,EACP7F,WAAYA,EACZC,YAAaA,KAKnB,yBAAKb,UAAU,WACZyC,GACC,kBAAC,EAAYA,MC7FvBmE,IAASC,OACP,kBAAC,IAAD,CAAUjD,MAAOA,GACf,kBAAC,EAAD,OAEFkD,SAASC,eAAe,W","file":"static/js/main.71bd0dcc.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  Title,\n  Year,\n  Type,\n  imdbID,\n  Poster,\n  showDetails,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{Title}</p>\n          <p>{`Type: ${Type}`}</p>\n          <p>{`Release year: ${Year}`}</p>\n          <button\n            type=\"button\"\n            onClick={() => showDetails(imdbID)}\n            className=\"button details-button\"\n          >\n            Show details\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  Title: PropTypes.string.isRequired,\n  Year: PropTypes.string.isRequired,\n  Type: PropTypes.string.isRequired,\n  imdbID: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n  showDetails: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n  showDetails,\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbID}\n        showDetails={showDetails}\n        {...movie}\n      />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbID: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  showDetails: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\nimport './Pagination.scss';\n\nexport const Pagination = ({ pages, changePage, currentPage }) => {\n  let pageBtns = Array.from({ length: pages }, (_, i) => i + 1);\n\n  return (\n    <ul className=\"pagination\">\n      {currentPage !== 1 && (\n        <li>\n          <button\n            type=\"button\"\n            className=\"page-btn slide\"\n            onClick={() => {\n              changePage(1);\n            }}\n          >\n            {`<<`}\n          </button>\n        </li>\n      )}\n      {\n        pageBtns\n          .slice(currentPage >= 3 ? currentPage - 3 : 0, currentPage + 2)\n          .map(btn => (\n            <li key={btn}>\n              <button\n                type=\"button\"\n                className={ClassNames({\n                  'page-btn': true,\n                  active: btn === currentPage,\n                })}\n                onClick={() => changePage(btn)}\n              >\n                {btn}\n              </button>\n            </li>\n          ))\n      }\n      {currentPage < pages && (\n        <li>\n          <button\n            type=\"button\"\n            className=\"page-btn slide\"\n            onClick={() => {\n              changePage(pages);\n              if (pages > 10 && currentPage !== pages && currentPage > 10) {\n                pageBtns = pageBtns.map(page => page + 1);\n              }\n            }}\n          >\n            {`>>`}\n          </button>\n        </li>\n      )}\n    </ul>\n  );\n};\n\nPagination.propTypes = {\n  pages: PropTypes.number.isRequired,\n  changePage: PropTypes.func.isRequired,\n  currentPage: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Details = props => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={props.Poster}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{props.Title}</p>\n        </div>\n      </div>\n      <hr />\n      <div className=\"content\">\n        {props.Plot}\n        <hr />\n        <a href={`https://www.imdb.com/title/${props.imdbID}/`}>IMDB link</a>\n        <hr />\n        <p><b>Type:</b></p>\n        <p>{props.Type}</p>\n        <p><b>Director:</b></p>\n        <p>{props.Director}</p>\n        <p><b>Actors:</b></p>\n        <p>{props.Actors}</p>\n        <p><b>Genre:</b></p>\n        <p>{props.Genre}</p>\n        <p><b>Country:</b></p>\n        <p>{props.Country}</p>\n        <p><b>Production:</b></p>\n        <p>{props.Production}</p>\n        <p><b>Released:</b></p>\n        <p>{props.Released}</p>\n        <p><b>Duration:</b></p>\n        <p>{props.Runtime}</p>\n        <p><b>IMDB Rating:</b></p>\n        <p>{props.imdbRating}</p>\n        <p><b>PG rating:</b></p>\n        <p>{props.Rated}</p>\n\n      </div>\n    </div>\n  </div>\n);\n\nDetails.propTypes = {\n  Plot: PropTypes.string.isRequired,\n  Poster: PropTypes.string.isRequired,\n  Title: PropTypes.string.isRequired,\n  Type: PropTypes.string.isRequired,\n  Director: PropTypes.string.isRequired,\n  Actors: PropTypes.string.isRequired,\n  Genre: PropTypes.string.isRequired,\n  Country: PropTypes.string.isRequired,\n  Production: PropTypes.string.isRequired,\n  Released: PropTypes.string.isRequired,\n  Runtime: PropTypes.string.isRequired,\n  imdbRating: PropTypes.string.isRequired,\n  Rated: PropTypes.string.isRequired,\n  imdbID: PropTypes.string.isRequired,\n};\n","import { createStore } from 'redux';\n\n// action types\nexport const SET_MOVIES = 'setMovies';\nexport const SET_DETAILED_MOVIE = 'setDetailedMovie';\nexport const SET_HISTORY = 'setHistory';\nexport const SET_CURRENT_QUERY = 'setCurrentQuery';\nexport const SET_TOTAL_RESULTS = 'setTotalResults';\nexport const SET_CURRENT_PAGE = 'setCurrentPage';\nexport const SET_PREV_STATE = 'setPrevState';\n\n// selectors\nexport const getMovies = state => state.movies;\nexport const getDetailedMovie = state => state.detailedMovie;\nexport const getHistory = state => state.searchHistory;\nexport const getCurQuery = state => state.currentQuery;\nexport const getTotalResults = state => state.totalResults;\nexport const getCurrentPage = state => state.currentPage;\n\n// action creators\nexport const setMovies = movies => ({\n  type: SET_MOVIES,\n  movies,\n});\n\nexport const setDetailedMovie = detailedMovie => ({\n  type: SET_DETAILED_MOVIE,\n  detailedMovie,\n});\n\nexport const setHistory = searchHistory => ({\n  type: SET_HISTORY,\n  searchHistory,\n});\n\nexport const setCurrentQuery = currentQuery => ({\n  type: SET_CURRENT_QUERY,\n  currentQuery,\n});\n\nexport const setTotalResults = totalResults => ({\n  type: SET_TOTAL_RESULTS,\n  totalResults,\n});\n\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage,\n});\n\n// reducer\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_MOVIES:\n      return {\n        ...state,\n        movies: action.movies,\n      };\n    case SET_DETAILED_MOVIE:\n      return {\n        ...state,\n        detailedMovie: action.detailedMovie,\n      };\n    case SET_HISTORY:\n      return {\n        ...state,\n        searchHistory: action.searchHistory,\n      };\n    case SET_CURRENT_QUERY:\n      return {\n        ...state,\n        currentQuery: action.currentQuery,\n      };\n    case SET_TOTAL_RESULTS:\n      return {\n        ...state,\n        totalResults: action.totalResults,\n      };\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.currentPage,\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = localStorage.getItem('reduxState')\n  ? JSON.parse(localStorage.getItem('reduxState'))\n  : {\n    movies: [],\n    detailedMovie: null,\n    searchHistory: [],\n    currentQuery: '',\n    totalResults: 0,\n    currentPage: 1,\n  };\n\nconst store = createStore(reducer);\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()));\n});\n\nexport default store;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './Header.scss';\n\nimport ClassNames from 'classnames';\nimport { setCurrentPage, setCurrentQuery, setHistory } from '../../redux/store';\n\nexport const Header = ({\n  findMovies,\n  dispatch,\n  searchHistory,\n  notFound,\n  setNotFound,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <div className=\"header\">\n      <div className=\"header--top\">\n        <div className=\"search\">\n          <form\n            className=\"search-form\"\n            onSubmit={(event) => {\n              event.preventDefault();\n              findMovies(inputValue, 1);\n              dispatch(setCurrentQuery(inputValue));\n              setInputValue('');\n              dispatch(setCurrentPage(1));\n            }}\n          >\n            <input\n              type=\"text\"\n              className={ClassNames({\n                'search-input': true,\n                'not-found': notFound,\n              })}\n              value={inputValue.trimLeft()}\n              placeholder=\"Enter movie title...\"\n              onChange={(event) => {\n                setInputValue(event.target.value);\n                setNotFound(false);\n              }}\n            />\n            {notFound && (\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )}\n            <button\n              type=\"submit\"\n              className=\"button\"\n            >\n              Search\n            </button>\n            <button\n              type=\"button\"\n              className=\"button button--clear\"\n              onClick={() => {\n                localStorage.clear();\n                window.location.reload();\n              }}\n            >\n              Clear\n            </button>\n          </form>\n        </div>\n        <div>\n          <h1 className=\"page-title\">IMDB movies finder</h1>\n        </div>\n      </div>\n      <div className=\"search-history\">\n        {searchHistory.length !== 0 && (\n          <p className=\"search-history__caption\">Last 10 queries: </p>\n        )}\n        <ul className=\"search-history__list\">\n          {searchHistory.map(query => (\n            <li key={query}>\n              <button\n                type=\"button\"\n                className=\"search-history__delete\"\n                onClick={() => dispatch(setHistory([...searchHistory\n                  .filter(entry => entry !== query)]))}\n              >\n                x\n              </button>\n              <button\n                type=\"button\"\n                className=\"search-history__item\"\n                onClick={() => {\n                  dispatch(setCurrentPage(1));\n                  dispatch(setCurrentQuery(query));\n                  findMovies(query, 1);\n                }}\n              >\n                {query}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  findMovies: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  searchHistory: PropTypes.arrayOf(PropTypes.string).isRequired,\n  notFound: PropTypes.bool.isRequired,\n  setNotFound: PropTypes.func.isRequired,\n};\n","const API_URL = `https://www.omdbapi.com/`;\n\nexport const fetchMovies = async(title, page) => {\n  const movie = await fetch(\n    `${API_URL}?s=${title}&apikey=81cd08c7&page=${page}`,\n  );\n\n  return movie.json();\n};\n\nexport const fetchMovieById = async(id) => {\n  const movie = await fetch(`${API_URL}?apikey=81cd08c7&i=${id}`);\n\n  return movie.json();\n};\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { Pagination } from './components/Pagination';\nimport { Details } from './components/Details';\nimport { Header } from './components/Header';\nimport { fetchMovies, fetchMovieById } from './api/api';\nimport {\n  getDetailedMovie,\n  getHistory,\n  getMovies,\n  setDetailedMovie,\n  setMovies,\n  setHistory,\n  getCurQuery,\n  getTotalResults,\n  setTotalResults,\n  getCurrentPage,\n  setCurrentPage,\n} from './redux/store';\n\nexport const App = () => {\n  const [notFound, setNotFound] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const movies = useSelector(getMovies);\n  const detailedMovie = useSelector(getDetailedMovie);\n  const searchHistory = useSelector(getHistory);\n  const curQuery = useSelector(getCurQuery);\n  const totalResults = useSelector(getTotalResults);\n  const currentPage = useSelector(getCurrentPage);\n\n  const updateHistory = (query) => {\n    if (searchHistory.includes(query)) {\n      return;\n    }\n\n    if (searchHistory.length < 10) {\n      dispatch(setHistory([...searchHistory, query]));\n    } else {\n      dispatch(setHistory([...searchHistory.slice(1), query]));\n    }\n  };\n\n  const findMovies = async(title, page) => {\n    const movie = await fetchMovies(title, page);\n\n    if (movie.Response !== 'False') {\n      dispatch(setMovies(movie.Search));\n      dispatch(setTotalResults(+movie.totalResults));\n      updateHistory(title);\n    } else {\n      setNotFound(true);\n    }\n  };\n\n  const showDetails = async(id) => {\n    const movie = await fetchMovieById(id);\n\n    dispatch(setDetailedMovie(movie));\n  };\n\n  const changePage = async(page) => {\n    const movie = await fetchMovies(curQuery, page);\n\n    dispatch(setMovies(movie.Search));\n    dispatch(setCurrentPage(page));\n  };\n\n  const totalPages = Math.floor(totalResults / 10);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <Header\n          findMovies={findMovies}\n          dispatch={dispatch}\n          searchHistory={searchHistory}\n          notFound={notFound}\n          setNotFound={setNotFound}\n        />\n\n        <MoviesList\n          movies={movies}\n          showDetails={showDetails}\n        />\n\n        {totalResults > 10 && (\n          <Pagination\n            pages={totalPages}\n            changePage={changePage}\n            currentPage={currentPage}\n          />\n        )}\n      </div>\n\n      <div className=\"sidebar\">\n        {detailedMovie && (\n          <Details {...detailedMovie} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}